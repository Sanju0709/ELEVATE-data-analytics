import pandas as pd

# Create the notebook cells content
cells = [
    {
        "cell_type": "markdown",
        "metadata": {},
        "source": "# Titanic Dataset - Exploratory Data Analysis (EDA)\n\nThis notebook performs EDA on the Titanic dataset to uncover patterns, trends, and anomalies using visual and statistical tools."
    },
    {
        "cell_type": "code",
        "execution_count": None,
        "metadata": {},
        "outputs": [],
        "source": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set visualization style\nsns.set(style='whitegrid')\n\n# Load dataset\ndf = pd.read_csv('titanic.csv')  # Update path if needed\ndf.head()"
    },
    {
        "cell_type": "markdown",
        "metadata": {},
        "source": "## Basic Info & Statistics"
    },
    {
        "cell_type": "code",
        "execution_count": None,
        "metadata": {},
        "outputs": [],
        "source": "df.info()\ndf.describe()\ndf.isnull().sum()\n\nprint(df['Survived'].value_counts())\nprint(df['Pclass'].value_counts())\nprint(df['Sex'].value_counts())"
    },
    {
        "cell_type": "markdown",
        "metadata": {},
        "source": "## Univariate Analysis"
    },
    {
        "cell_type": "code",
        "execution_count": None,
        "metadata": {},
        "outputs": [],
        "source": "df.hist(bins=20, figsize=(14,10), edgecolor='black')\nplt.suptitle(\"Distribution of Numerical Features\", fontsize=16)\nplt.show()"
    },
    {
        "cell_type": "code",
        "execution_count": None,
        "metadata": {},
        "outputs": [],
        "source": "sns.boxplot(x='Fare', data=df)\nplt.title(\"Boxplot of Fare\")\nplt.show()"
    },
    {
        "cell_type": "code",
        "execution_count": None,
        "metadata": {},
        "outputs": [],
        "source": "sns.countplot(x='Survived', data=df)\nplt.title(\"Survival Count\")\nplt.show()\n\nsns.countplot(x='Pclass', hue='Survived', data=df)\nplt.title(\"Passenger Class vs Survival\")\nplt.show()\n\nsns.countplot(x='Sex', hue='Survived', data=df)\nplt.title(\"Gender vs Survival\")\nplt.show()"
    },
    {
        "cell_type": "markdown",
        "metadata": {},
        "source": "## Bivariate Analysis"
    },
    {
        "cell_type": "code",
        "execution_count": None,
        "metadata": {},
        "outputs": [],
        "source": "sns.scatterplot(x='Age', y='Fare', hue='Survived', data=df)\nplt.title(\"Age vs Fare colored by Survival\")\nplt.show()"
    },
    {
        "cell_type": "code",
        "execution_count": None,
        "metadata": {},
        "outputs": [],
        "source": "sns.boxplot(x='Pclass', y='Fare', data=df)\nplt.title(\"Passenger Class vs Fare\")\nplt.show()"
    },
    {
        "cell_type": "code",
        "execution_count": None,
        "metadata": {},
        "outputs": [],
        "source": "plt.figure(figsize=(10,6))\nsns.heatmap(df.corr(), annot=True, cmap='coolwarm')\nplt.title(\"Correlation Heatmap\")\nplt.show()"
    },
    {
        "cell_type": "code",
        "execution_count": None,
        "metadata": {},
        "outputs": [],
        "source": "sns.pairplot(df[['Survived', 'Age', 'Fare', 'Pclass']], hue='Survived')\nplt.suptitle(\"Pairplot of Selected Features\", y=1.02)\nplt.show()"
    },
    {
        "cell_type": "markdown",
        "metadata": {},
        "source": "## Observations\n- 1st class passengers had higher survival rates.\n- Females survived at much higher rates than males.\n- Higher fare tends to correlate with higher survival chances.\n- Several outliers present in Fare.\n- Some Age data is missing."
    },
    {
        "cell_type": "markdown",
        "metadata": {},
        "source": "## Summary of Findings\n- First-class passengers and females had the highest survival rates.\n- Fare and class were strong indicators of survival likelihood.\n- Several outliers were present in fare, which could influence model performance.\n- Missing values in the 'Age' column should be handled before modeling."
    }
]

# Save as a Jupyter Notebook file
import json
from pathlib import Path

notebook_content = {
    "cells": cells,
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "name": "python",
            "version": "3.x"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 2
}

output_path = Path("/mnt/data/titanic_eda.ipynb")
with open(output_path, "w") as f:
    json.dump(notebook_content, f)

output_path.name
